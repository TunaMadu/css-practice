body {
  background-color: aliceblue;
}

div {
  background-color: antiquewhite;
}
/* here the parent element is the body. and b/c we dont define some specific width, 50% will be based on the current display! */
.no-default {
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 50%;
  margin: 0 auto;
}

.default {
  max-width: 120rem;
  margin: 0 auto;
  text-align: center;
  margin-bottom: 5rem;
}

.half-of-half {
  background-color: rgba(42, 55, 65, 0.529);
  width: 50%;
  margin: 0 auto;
}

.lets-half {
  width: 50%;
  outline: 1px red solid;
  margin: 0 auto;
}

/* when working with widths its important to know that when it comes to positioning things on the screen you have to define some width ie: making elements be a specific size within elements: element 1 take 50%, element 2 take 10% ..... if we dont define what size the element should be, the browser wont know what the size of the element should be and will leave everything as default. Because remember, block level elements take up as much space as it can, to limit this then you have to define some width*/

.inline-block-example {
  max-width: 120rem;
  margin: 0 auto;
}

a {
  display: block;
  width: 50%;
  margin: 0 auto;
  background-color: aqua;
}

/* an interesting point of reference is that although inline block do give us the best of both worlds between inline and block. we cant center it as easy with using margins! thats probably why many choose to make images as block level elements!*/
.yes p {
  display: inline-block;
  width: 25%;
  /* margin: 0 auto; */
  background-color: rgb(255, 255, 0);
}

/* solution? we an change it to a block level element or we can use flexbox! flexbox is actually p flexible, who would've known :) */

.yes {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
